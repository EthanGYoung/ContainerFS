Implementing Bloom Filters in imgGen

* Each layer needs a precomputed bloom filter
	* Need to precompute the optimal number size of filter
* Add the filter to the metadata at the end of the file
* Keys are the absolute path as a string (Absolute relative to root of img)


Two Pass System

- First pass -> Can be computed when initial img created (Count files - Assumming immutable file paths)
	* Determine number of elements in the bloom filter by iterating through
	  included files and counting total number
	* Compute the number of hash functions (k) needed to minimize false positive rate

- Second pass
	* Build the bloom filter by iterating through all files and paths using number
	  of hash functions and size of filter computed from first pass
		* Use computed metadata from img generator to iterate over
		* Add new file by ORing the hashed data with the filter
	* Append metadata field with info
		- Size of filter
		- Actual filter data

* If this process takes a long time, can speed up by parallelizing computation
	- Since static directory of files


File Organization
* Create new dir called "Filters", allowing us to add multiple implementations of filters
* Filter Type 
- Methods
	- Initialize filter 	-> Allows for parameters to be passed in specifying size and number hash functions
	- Add element 		-> Add element to the filter
	- Remove element	-> Remove an element from a filter (Not supported in Bloom, but in cuckoo it is)
	
	// Make specific to each filter, future filters may not need this
	- Optimize filter	-> Allows for computation of relevant parameters in "first pass" for generating filters
		- Ex) For bloom filter, just use count of number of files as the parameter and probability desired
		- May be issue if different return types needed for optimize. Could have a context object

* Optimize filter called in first pass

Bloom Filter Driver
	1) File counter during walk of directory to convert to image file
		- Create statistics struct that holds this information
	2) Initialize a Bloom Filter given specific probability and num elements
	3) Recursively traverse image metadata to create hashed paths for filter
	4) Append bloom filter to metadata
